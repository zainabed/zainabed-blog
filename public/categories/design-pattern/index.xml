<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Design Pattern on ZAINABED</title>
    <link>http://localhost:8080/categories/design-pattern/</link>
    <description>Recent content in Design Pattern on ZAINABED</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Apr 2020 11:01:00 -0400</lastBuildDate><atom:link href="http://localhost:8080/categories/design-pattern/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Abstract Factory Design Pattern Analysis</title>
      <link>http://localhost:8080/2020/04/abstract-factory-design-pattern-analysis.html/</link>
      <pubDate>Fri, 24 Apr 2020 11:01:00 -0400</pubDate>
      
      <guid>http://localhost:8080/2020/04/abstract-factory-design-pattern-analysis.html/</guid>
      <description>What is the Abstract Factory design pattern? The intent or definition of Abstract Factory is
 “Provide an interface for creating families of related or dependent objects without specifying their concrete classes”  It&amp;rsquo;s a bit of a complicated definition, so we&amp;rsquo;ll need to break it down into meaningful chunks to understand it.
1. &amp;ldquo;Provide an interface&amp;rdquo; When we discuss the Abstract Factory, we are referring to interfaces rather than abstract classes.</description>
    </item>
    
  </channel>
</rss>
