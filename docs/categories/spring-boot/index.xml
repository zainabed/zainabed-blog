<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Spring Boot on ZAINABED</title>
    <link>https://www.zainabed.com/categories/spring-boot/</link>
    <description>Recent content in Spring Boot on ZAINABED</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 09 Feb 2023 03:08:11 -0500</lastBuildDate><atom:link href="https://www.zainabed.com/categories/spring-boot/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How To Use @ConfigurationProperties In Spring Boot </title>
      <link>https://www.zainabed.com/tutorials/spring-boot-configuration-properties-tutorial/</link>
      <pubDate>Thu, 09 Feb 2023 03:08:11 -0500</pubDate>
      
      <guid>https://www.zainabed.com/tutorials/spring-boot-configuration-properties-tutorial/</guid>
      <description>Introduction This tutorial will show you how to use @ConfigurationProperties in a Spring Boot application. This annotation is designed to load properties from an application property file into an application context and configure them using a Java object.
Why do we need @ConfigurationProperties? What about the @Value annotation? The typical method of registering configuration properties to a Java object field in a Spring Boot application is the @Value annotation, but it is only acceptable for single independent configuration.</description>
    </item>
    
    <item>
      <title>How To Make Spring Boot Controller Unit Test Faster</title>
      <link>https://www.zainabed.com/tutorials/spring-boot-controller-test/</link>
      <pubDate>Tue, 10 Jan 2023 09:46:44 -0500</pubDate>
      
      <guid>https://www.zainabed.com/tutorials/spring-boot-controller-test/</guid>
      <description>Introduction There are several methods for testing Rest controllers in the Spring Boot framework, and this post will demonstrate one of the quickest.
Tools  Spring Boot: 2.7.6
Java : 11
 Rest Controller Let&amp;rsquo;s create a simple REST API controller with one service to fetch the data from the database.
UserController.java @RestController public class UserController { private final UserService userService; public UserController(final UserService userService) { this.userService = userService; } @PostMapping(path = &amp;#34;/user&amp;#34;, consumes = MediaType.</description>
    </item>
    
    <item>
      <title>Easy Steps To Create Log4j2 Rolling File For Spring Boot</title>
      <link>https://www.zainabed.com/tutorials/spring-log4j2-rolling-file/</link>
      <pubDate>Sun, 20 Nov 2022 01:50:08 -0500</pubDate>
      
      <guid>https://www.zainabed.com/tutorials/spring-log4j2-rolling-file/</guid>
      <description>Introduction Spring Boot applications can save informative messages or application errors to a file. This functionality allows you to monitor the application&amp;rsquo;s health and take necessary action when problems arise.
Logging all of this information to a single file, on the other hand, will cause the file to expand in size, which would be a nightmare if the file size rose to MB or GB and you wanted to trace a specific exception throughout the whole log file.</description>
    </item>
    
    <item>
      <title>Two Steps To Add Log4j2 To Spring Boot Application</title>
      <link>https://www.zainabed.com/tutorials/spring-boot-log4j2-setup/</link>
      <pubDate>Thu, 17 Nov 2022 02:10:33 -0500</pubDate>
      
      <guid>https://www.zainabed.com/tutorials/spring-boot-log4j2-setup/</guid>
      <description>Introduction Log4j2 is a comprehensive and modern framework for logging messages in applications.
And Spring Boot, which is widely used in industry, provides excellent support for Log4j2.
In this tutorial, we will look at how to configure it using an XML and YAML file.
Setup Download the Spring Boot application from Spring Boot Starter and extract the zip file.
POM Configuration Add log4j2 as a dependency to the pom.xml file.Â pom.</description>
    </item>
    
    <item>
      <title>First Step Toward Spring Boot Cloud Gateway </title>
      <link>https://www.zainabed.com/tutorials/spring-boot-cloud-gateway-introduction/</link>
      <pubDate>Mon, 07 Nov 2022 10:39:48 -0500</pubDate>
      
      <guid>https://www.zainabed.com/tutorials/spring-boot-cloud-gateway-introduction/</guid>
      <description>Introduction This tutorial is a short introduction to Spring Cloud Gateway.
By following the quick and easy steps provided below, you will be able to start the REST API gateway project.
Prerequisite  Java Maven Spring Boot  Download the Spring Boot project from Spring Initializr and select Gateway  as dependency.
Now generate and download the project and use your favourite editor to import it.
Gateway Configuration You can use a YAML file or Java code to configure routes.</description>
    </item>
    
    <item>
      <title>Spring Boot Resttemplate Guide With Example</title>
      <link>https://www.zainabed.com/2022/04/spring-boot-resttemplate-guide-with-example.html/</link>
      <pubDate>Fri, 22 Apr 2022 09:42:03 -0400</pubDate>
      
      <guid>https://www.zainabed.com/2022/04/spring-boot-resttemplate-guide-with-example.html/</guid>
      <description>What is RestTemplet? RestTemplate is a HTTP Client library that provides basic APIs for executing different HTTP type requests.
RestTemplate is one of the HTTP libraries available on the market.
The Spring Boot team designed and maintains it.
As previously said, it is a client library, which means it may be utilised in our application as a stand-alone dependency. To utilise it, you don&amp;rsquo;t require a complete Spring boot application.</description>
    </item>
    
    <item>
      <title>How to Enable Sql Logs in Spring Boot Application</title>
      <link>https://www.zainabed.com/2022/04/how-to-enable-sql-logs-in-spring-boot-application.html/</link>
      <pubDate>Fri, 08 Apr 2022 10:49:12 -0400</pubDate>
      
      <guid>https://www.zainabed.com/2022/04/how-to-enable-sql-logs-in-spring-boot-application.html/</guid>
      <description>Introduction This tutorial will demonstrate how to enable and disable SQL log statements in a Spring Boot application in order to debug SQL flow.
Problem You will frequently need to debug the SQL statement while developing a Spring Boot application with a SQL database.
SQL debug logs can assist you figure out what&amp;rsquo;s wrong with JPA statements and whether or not there&amp;rsquo;s a problem with database connectivity.
Example If you&amp;rsquo;ve built custom Spring data JPA methods and need to know what SQL statement is being utilized behind them,</description>
    </item>
    
  </channel>
</rss>
